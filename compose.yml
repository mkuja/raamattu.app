# See file example.env for mandatory credentials settings and create your own .env file.
# This file has two profiles to choose from: dev or prod

# To run, use command `docker compose --profile dev up --watch`.
# I don't know why I added the production profile, lol. Maybe I can use it, so it can stay.

services:

  # Dev and prod profiles have different environment vars, and refer to
  # different services.
  raamattu-dev:
    build: .
    profiles:
      - dev
    ports:
      - "3000:3000"
    environment:
      - RAAMATTU_PG=postgresql://${POSTGRES_USER_DEV}:${POSTGRES_PASSWORD_DEV}@postgres/${POSTGRES_DB_DEV}
    depends_on:
      postgres-dev:
        condition: service_healthy
      migration-dev:
        condition: service_completed_successfully
    develop:
      watch:
        - action: rebuild
          path: "./raamattu"
        - action: rebuild
          path: "./raamattu-db"

  # Production profile for the main service.
  raamattu-prod:
    build: .
    profiles:
      - prod
    ports:
      - "3000:3000"
    environment:
      - RAAMATTU_PG=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    depends_on:
      postgres-prod:
        condition: service_healthy
      migration-prod:
        condition: service_completed_successfully


  # Dev profile exposes 5432 for direct tampering of database and lacks a volume
  postgres-dev:
    image: postgres:17.0
    profiles:
      - dev
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 60s
      retries: 15
      start_period: 5s

  # Postgres production profile
  postgres-prod:
    image: postgres:17.0
    profiles:
      - prod
    restart: always
    volumes:
      - raamattuapp-data-prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 60s
      retries: 15
      start_period: 5s


  # Initialize database with the schema with development connection settings.
  migration-dev:
    build:
      dockerfile: migrate.Dockerfile
    profiles:
      - dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER_DEV}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DEV}
      - POSTGRES_DB=${POSTGRES_DB_DEV}
    restart: no
    depends_on:
      postgres-dev:
        condition: service_healthy

  # Same with the production settings.
  migration-prod:
    build:
      dockerfile: migrate.Dockerfile
    profiles:
      - prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: no
    depends_on:
      postgres-prod:
        condition: service_healthy
